<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Builder API Sandbox</title>
	<style>
		body {
			font-size: 24px;
		}
	</style>
	<script defer="defer" type="text/javascript" src="D-Builder%20API%20Sandbox_files/runtime.js"></script>
</head>

<body><audio class="audio-for-speech" src=""></audio>
	<div class="translate-tooltip-mtz translator-hidden">
		<div class="header">
			<div class="header-controls">
				Translator
			</div>
			<div class="header-controls">
				<span class="support"></span>
			</div>
			<div class="header-controls">
				<span class="settings"></span>
			</div>
		</div>
		<div class="translated-text">
			<div class="words"></div>
			<div class="sentences"></div>
		</div>
	</div><span class="translate-button-mtz translator-hidden"></span>
	<h4 style="margin: 10px 0">Expected</h4>
	<div id="example-root" style="display: inline-flex; border: solid 1px black; border-radius: 5px; padding: 10px;">
		<!-- Квадрат -->
		<div style="width: 100px; height: 100px; background-color: blue;  margin-right: 14px;"></div>
		<!-- Круг -->
		<div style="width: 100px; height: 100px; background-color: red; border-radius: 50%;"></div>
		<!-- Треугольник -->
		<div
			style="width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid green;">
		</div>
	</div>
	<h4 style="margin: 10px 0">Your result</h4>
	<div id="root">
	</div>

	<script>
		class BuilderApi {
			constructor() {
				this.context = [];
				this.history = []; // Хранит историю контекстов для previousContext
			}

			root(selector) {
				this.context = Array.from(document.querySelectorAll(selector));
				this.history.push(this.context);
				return this;
			}

			append(tag, attrs = {}) {
				const newElements = [];
				this.context.forEach(el => {
					const newEl = document.createElement(tag);
					for (const [key, value] of Object.entries(attrs)) {
						if (key === 'content') {
							newEl.textContent = value;
						} else {
							newEl.setAttribute(key, value);
						}
					}
					el.appendChild(newEl);
					newElements.push(newEl);
				});
				this.context = newElements; // Обновляем контекст на созданные элементы
				return this;
			}

			appendMany(count, tag, attrs) {
				const newElements = [];
				console.log(this.context);
				this.context.forEach(el => {
					for (let i = 0; i < count; i++) {
						const newAttrs = typeof attrs === 'function' ? attrs(i) : attrs;
						const newEl = document.createElement(tag);
						for (const [key, value] of Object.entries(newAttrs)) {
							if (key === 'content') {
								newEl.textContent = value;
							} else {
								newEl.setAttribute(key, value);
							}
						}
						el.appendChild(newEl);
						newElements.push(newEl);
					}
				});
				this.context = newElements; // Обновляем контекст на созданные элементы
				return this;
			}

			css(styles) {
				this.context.forEach(el => {
					for (const [key, value] of Object.entries(styles)) {
						el.style[key] = value;
					}
				});
				return this;
			}

			children(selector) {
				this.context = this.context.flatMap(el => Array.from(el.children));
				if (selector) {
					this.context = this.context.filter(el => el.matches(selector));
				}
				return this;
			}

			select(selector) {
				this.context = this.context.flatMap(el => Array.from(el.querySelectorAll(selector)));
				return this;
			}

			previousContext(steps = 1) {
				if (steps > 0 && steps <= this.history.length - 1) {
					this.context = this.history[this.history.length - 1 - steps];
				} else if (steps >= this.history.length) {
					this.context = this.history[0]; // Установить на самый первый контекст
				}
				return this;
			}

			remove(selector) {
				this.context.forEach(el => {
					const elementsToRemove = selector ? el.querySelectorAll(selector) : el.children;
					elementsToRemove.forEach(child => child.remove());
				});
				return this;
			}

			commit() {
				this.context = []; // Сбросить контекст после выполнения
				return this;
			}
		}

		// Пример использования API
		const builder = new BuilderApi();
		// builder.root('#root')
		// 	.css({ border: 'solid 1px black', borderRadius: '5px', padding: '10px', display: 'inline-flex' })
		// 	.append('div', { id: 'square' })
		// 	.css({ width: '100px', height: '100px', backgroundColor: 'blue', marginRight: '14px' })
		// 	.previousContext()
		// 	.append('div', { id: 'circle' })
		// 	.css({ width: '100px', height: '100px', backgroundColor: 'red', borderRadius: '50%' })
		// 	.previousContext()
		// 	.append('div', { id: 'triangle' })
		// 	.css({
		// 		width: '0',
		// 		height: '0',
		// 		borderLeft: '50px solid transparent',
		// 		borderRight: '50px solid transparent',
		// 		borderBottom: '100px solid green'
		// 	})
		// 	.commit();
		builder.root('div')
			.append('div', { id: 'div1' })
			.children()
			.appendMany(3, 'span', (idx) => ({ id: `span${idx}`, content: 'Hello' }))
			.select('span')
			.css('color', 'green')
			.commit()
	</script>


</body>

</html>